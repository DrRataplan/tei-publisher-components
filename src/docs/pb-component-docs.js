import { LitElement, html, css } from 'lit-element';
import '@polymer/app-layout/app-drawer-layout/app-drawer-layout.js';
import '@polymer/app-layout/app-drawer/app-drawer.js';
import './pb-components-list.js';
import { PbComponentView } from './pb-component-view.js';

/**
 * An API viewer for webcomponents based on the JSON format produced
 * by web-component-analyzer.
 * 
 * @slot logo - HTML to show as logo on top of the drawer
 * @listens pb-api-component if another webcomponent should be shown
 */
export class PbComponentDocs extends LitElement {
    static get properties() {
        return {
            /**
             * Path to the JSON file generated by web-components-analyzer
             */
            file: {
                type: String
            },
            /**
             * Path to the JSON file mapping component names to available demo files
             */
            demo: {
                type: String
            },
            _json: {
                type: Object
            }
        };
    }

    constructor() {
        super();
        this.file = null;
        this.demo = null;

        /** @type {PbComponentView} */
        this.view = null;
    }

    connectedCallback() {
        super.connectedCallback();

        window.addEventListener('popstate', (ev) => {
            if (ev.state) {
                this.view.show(ev.state.component, ev.state.tab);
            } else {
                this.view.clear();
            }
        });

        document.addEventListener('pb-api-component', (/** @type {CustomEvent} */ ev) => {
            const { component, tab } = ev.detail;
            const url = `?component=${component.name}&tab=${tab}`;
            history.pushState({ component, tab }, "view component", url);
            this.view.show(component, tab);
        });
    }

    firstUpdated() {
        super.firstUpdated();

        this.view = /** @type {PbComponentView} */ (this.shadowRoot.getElementById('view'));

        this._load().then(() => {
            this._loadDemos().then(() => {
                const url = new URL(window.location.href);
                const component = url.searchParams.get('component');
                const tab = url.searchParams.get('tab');
                if (component && tab) {
                    const comp = this._json.tags.find((tag) => tag.name === component);
                    if (comp) {
                        this.view.show(comp, parseInt(tab));
                    }
                }
            })
        });
    }

    _load() {
        return new Promise((resolve) => {
            fetch(this.file)
                .then((response) => response.json())
                .then((data) => {
                    this._json = data;
                    resolve(data);
                });
        });
    }

    _loadDemos() {
        return new Promise((resolve) => {
            if (this.demo) {
                fetch(this.demo)
                    .then((response) => response.json())
                    .then((data) => {
                        this._demos = data;
                        this._json.tags.forEach((tag) => {
                            if (data[tag.name]) {
                                tag.demo = data[tag.name];
                            } else {
                                tag.demo = {};
                            }
                        });
                        resolve();
                    });
            } else {
                resolve();
            }
        });
    }

    render() {
        return html`
            <app-drawer-layout>
                <app-drawer id="drawer" align="left" slot="drawer" persistent>
                    <slot name="logo"></slot>
                    <pb-components-list .json="${this._json}"></pb-components-list>
                </app-drawer>
                <pb-component-view id="view"></pb-component-view>
            </app-drawer-layout>
        `;
    }

    static get styles() {
        return css`
            :host {
                display: block;
            }
            pb-components-list {
                height: calc(100vh - 64px);
                overflow: auto;
            }
        `;
    }
}
customElements.define('pb-component-docs', PbComponentDocs);